@using Game;
@using System.Diagnostics;
@inject NavigationManager navigationManager
@page "/"

@if (!gameClient.IsConnected) {
    <div class="container">
        <div class="row">
            <div class="col-12 col-md-6 offset-md-3">
                <h1>Humanity Against Cards</h1>
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" id="name" @bind-value="name">
                </div>
                <div class="form-group">
                    <label for="code">Code</label>
                    <input type="text" class="form-control" id="code" @bind-value="roomCode">
                </div>
                <div class="row">
                    <div class="col">
                        <button class="btn btn-success btn-block" @onclick="CreateGame">Create</button>
                    </div>
                    <div class="col">
                        <button class="btn btn-primary btn-block" @onclick="JoinGame">Join</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

} else {
    <button class="btn btn-primary" @onclick="LeaveGame">Leave</button>
    <p>Code: @gameClient.Code</p>

    if (gameClient.State == GameState.NotStarted) {
        <button @onclick="StartGame">Start</button>
    }

    if (gameClient.CurrentQuestion != null) {
        <div class="playing-card inverse">
            <p>@gameClient.CurrentQuestion.Text</p>
        </div>
    }

    if (gameClient.Hand.Any()) {
        foreach (var card in gameClient.Hand) {
            <div class="playing-card" @onclick="@(i => HandCardClicked(card.Id))">
                <p>@card.Text</p>
            </div>
        }
    }

    if (gameClient.SubmittedAnswers.Any()) {
        foreach (var submittedCard in gameClient.SubmittedAnswers) {
            <div class=" playing-card @(submittedCard.IsWinningCard ? " winning-card" : "" )" @onclick="@(i => SubmittedCardClicked(submittedCard.Id))">
                @foreach (var answer in submittedCard.AnswerCards) {
                    <p>@answer.Text</p>
                }
            </div>
        }
    }
}

@code {
    private string name;
    private string roomCode;
    private GameClient gameClient;

    protected override void OnInitialized() {
        gameClient = new GameClient(navigationManager);

        gameClient.UIUpdated += () => {
            StateHasChanged();
        };

        base.OnInitialized();
    }

    private async void CreateGame() {
        await gameClient.CreateGame(name);
    }

    private async void JoinGame() {
        await gameClient.JoinGame(name, roomCode);
    }

    private async void LeaveGame() {
        await gameClient.LeaveGame();
    }

    private async void StartGame() {
        await gameClient.StartGame();
    }

    private async void HandCardClicked(Guid cardId) {
        await gameClient.SubmitCard(cardId);
    }

    private async void SubmittedCardClicked(Guid cardId) {
        await gameClient.Vote(cardId);

    }
}
